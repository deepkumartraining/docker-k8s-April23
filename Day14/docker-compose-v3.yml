version: "3"
services:
  redis:
    image: redis:latest
    ports:
     - "6379"
    networks:
      - backend
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
  db:
    image: postgres:14
    ports:
     - "5432"
    networks:
      - backend 
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - /tmp:/var/lib/postgresql/data
    deploy:
      placement:
        constraints: [node.role == manager] 
  vote-app:
    buils: ./vote
    image: vote-app:latest
    ports:
      - 5000:80
    networks:
      - frontend
    depends_on:
      - redis
    deploy:
      replicas: 2
      labels: [APP=VOTE]
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure
  worker-app:
    image: worker-app:latest    
    networks:
      - frontend
      - backend
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=WORKER]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager] 
  result-app:
    image: result-app:latest
    ports:
      - 5001:80
    networks:
      - frontend
      - backend
    depends_on:
      - db
    deploy:
      replicas: 1
      labels: [APP=RESULT]
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure    
networks:
  frontend:
  backend: